# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="UN0RqKKHOZp1>W2JM6deFGkHmk9HHAPT/tW:Df44pT3S2]FRqBGD9O20^0r;XHo>"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# global=Global

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

#Set to true if you want to broadcast this play to DDSL
ddsl.broadcastservice=true
#Specify serviceId if ddsl.broadcastservice=true
ddsl.environment=test
ddsl.serviceid.type=http
ddsl.serviceid.name=Play2ExampleClient
ddsl.serviceid.version=1.0

# If no awailable service if found "online", DDSL fill fallback to look up the following key in this config file
# to enable you to make it work anyway..
ddsl.fallback.ServiceId.test.http.Play2ExampleServer.1.0 = "http://www.example.com/"

